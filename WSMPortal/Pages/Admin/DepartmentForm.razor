@page "/admin/Department"
@inject ICompanyEndpoint companyEndpoint
@inject IDepartmentEndpoint departmentEndpoint
@inject IUserEndpoint userEndpoint
@inject IMapper mapper
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

<h1>Department</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<EditForm Model="formDepartment" OnValidSubmit="CreateDepartment">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm">
            <strong class="text-center">Department Form</strong>
            <div>
                <label class="col-form-label">Department Name</label>
                <InputText class="form-control" @bind-Value="formDepartment.DepartmentName" />
            </div>
            <div>
                <label class="col-form-label">Address</label>
                <InputText class="form-control" @bind-Value="formDepartment.Address" />
            </div>
            <div>
                <label class="col-form-label">Phone Number</label>
                <InputText class="form-control" @bind-Value="formDepartment.PhoneNumber" />
            </div>
            <div>
                <label class="col-form-label">Description</label>
                <InputText class="form-control" @bind-Value="formDepartment.Description" />
            </div>
            <div>
                <label>Date Founded</label>
                <InputDate class="form-control" @bind-Value="formDepartment.CreatedDate" />
            </div>
            <div>
                <div class="col-md-12 text-center mt-2 mb-2">
                    <button type="submit" class="btn btn-success">
                        Submit
                    </button>
                </div>
            </div>
        </div> 
    </div>
    <div class="row">
        <div class="col-sm">
            <strong class="text-center">Departments</strong>
            <InputRadioGroup ValueChanged="@((e) => onRadioDepChange(e))" TValue="int" ValueExpression="(() => SelectedValue)">
                @if (departments is not null)
                {
                    <Virtualize Items="departments" Context="d" OverscanCount="10">
                        <div>
                            <InputRadio Value="d.Id" id="@d.Id" />
                            <label for="@d.Id">@d.DepartmentName</label>
                        </div>
                    </Virtualize>
                }
            </InputRadioGroup>
        </div>
        <div class="col-sm">
            <strong class="text-center">Parent Company</strong>
            <MyInputRadioGroup @bind-Value="formDepartment.CompanyId">
                @if (companies is not null)
                {
                    <Virtualize Items="companies" Context="c" OverscanCount="10">
                        <div>
                            <InputRadio Value="c.Id" id="@c.Id" />
                            <label for="@c.Id">@c.CompanyName</label>
                        </div>
                    </Virtualize>
                }
            </MyInputRadioGroup>
        </div>
        <div class="col-sm">
        <strong class="text-center">Chair Person</strong>
            <MyInputRadioGroup @bind-Value="formDepartment.ChairPersonId">
                @if (companies is not null)
                {
                    <Virtualize Items="users" Context="u" OverscanCount="10">
                        <div>
                            <InputRadio Value="u.Id" id="@u.Id" />
                            <label for="@u.Id">@u.FullName</label>
                        </div>
                    </Virtualize>
                }
            </MyInputRadioGroup>
        </div>
    </div>
</EditForm>

@code {
    public int SelectedValue { get; set; } = 0;

    private double totalMinutesDepartment = 0;
    private double totalMinutesCompany = 0;
    private double totalMinutesUser = 0;

    private List<DepartmentModel> departments;
    private DepartmentModel selectedDepartment = new();
    private FormDepartmentModel formDepartment = new();
    private const string DepartmentListName = "departmentList";
    private const string DepartmentCacheDate = "departmentCacheDate";

    private List<CompanyModel> companies;
    private const string CompanyListName = "companyList";
    private const string CompanyCacheDate = "companyCacheDate";

    private List<UserModel> users;
    private const string UserListName = "userList";
    private const string UserCacheDate = "userCacheDate";

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        formDepartment.CreatedDate = DateTime.UtcNow;

        formDepartment = mapper.Map<FormDepartmentModel>(selectedDepartment);

        departments = await localStorage.GetItemAsync<List<DepartmentModel>>(DepartmentListName);
        companies = await localStorage.GetItemAsync<List<CompanyModel>>(CompanyListName);
        users = await localStorage.GetItemAsync<List<UserModel>>(UserListName);

        DateTime? cacheDateCompanies = await localStorage.GetItemAsync<DateTime?>(CompanyCacheDate);
        DateTime? cacheDateUsers = await localStorage.GetItemAsync<DateTime?>(UserCacheDate);

        if (cacheDateCompanies is not null)
        {
            totalMinutesCompany = DateTime.UtcNow.Subtract((DateTime)cacheDateCompanies).TotalMinutes;
        }

        if (cacheDateUsers is not null)
        {
            totalMinutesUser = DateTime.UtcNow.Subtract((DateTime)cacheDateUsers).TotalMinutes;
        }

        if (companies is null || users is null || departments is null ||
            totalMinutesCompany > 10 || totalMinutesUser > 10 || totalMinutesDepartment > 10)
        {
            try
            {
                companies = await companyEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(CompanyListName, companies);
                await localStorage.SetItemAsync(CompanyCacheDate, DateTime.UtcNow);

                departments = await departmentEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(DepartmentListName, departments);
                await localStorage.SetItemAsync(DepartmentCacheDate, DateTime.UtcNow);

                users = await userEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(UserListName, users);
                await localStorage.SetItemAsync(UserCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task CreateDepartment()
    {
        try
        {
            var mappedDepartmentModel = mapper.Map<DepartmentModel>(formDepartment);

            await departmentEndpoint.PostDepartmentAsync(mappedDepartmentModel);
            navManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void onRadioDepChange(object sender)
    {
        formDepartment = mapper.Map<FormDepartmentModel>(departments.Where(x => x.Id == (int)sender).FirstOrDefault());
    }
}
