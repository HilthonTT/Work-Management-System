@page "/updateTask/{Id:int}"
@using WSMPortal.Components
@inject ITaskEndpoint taskEndpoint
@inject IUserEndpoint userEndpoint
@inject IDepartmentEndpoint departmentEndpoint
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@attribute [Authorize(Roles = "Admin")]

<h1 class="page-heading text-uppercase mb-4">Update A Task</h1>

@if (task is not null)
{
    <EditForm Model="updatedTask" OnValidSubmit="UpdateTaskAsync">
        <div class="row justify-content-center create-form">
            <div class="col-xl-3 form-layout create-form-department-company">
                <div class="input-section">
                <label class="form-label fw-bold text-uppercase">Department</label>
                <div class="input-description">Choose one department to assign.</div>
                <div class="col-lg-12">
                    <input @oninput="((txt) => OnSearchInputDepartment((string)txt.Value))" 
                    class="form-control"  
                    placeholder="Search Department" />
                </div>
                <div class="col-lg-8">
                    <MyInputRadioGroup id="department" @bind-Value="updatedTask.DepartmentId">
                            @if (departments is not null)
                            {
                                @foreach (var d in departments)
                                {
                                        <div class="radio-item-group">
                                            <InputRadio Value="@d.Id" id="@d.Id" />
                                            <label for="@d.Id">@d.DepartmentName - @d.Address</label>
                                        </div>
                                }
                            }
                    </MyInputRadioGroup>
                </div>
            </div>
        </div>
        <div class="col-xl-5 col-lg-10 form-layout">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="close-button-section">
                <button class="btn btn-close" @onclick="ClosePage"></button>
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="task-title">Title</label>
                <div class="input-description">Focus on the general idea of the task in question.</div>
                <InputText type="text" class="form-control" id="task-title" @bind-Value="updatedTask.Title" />
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="task-description">Description</label>
                <div class="input-description">Focus on detailing the information about the task.</div>
                <InputTextArea type="text" class="form-control" id="task-description" @bind-Value="updatedTask.Description" />
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="task-progress">Progress</label>
                <div class="input-description">Focus on the percentage that the task is done.</div>
                <InputNumber class="form-control" id="task-progress" @bind-Value="updatedTask.PercentageDone" />
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="task-date-due">Date Due</label>
                <div class="input-description">Focus on the date that you want the task to be done.</div>
                <InputDate class="form-control" id="task-date-due" @bind-Value="updatedTask.DateDue" />
            </div>
            <div class="center-children">
                <button class="btn btn-success btn-lg text-uppercase" type="submit">Update Task</button>
            </div>
        </div>
        <div class="col-xl-3 form-layout create-form-user">
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase">User</label>
                <div class="input-description">Choose one user to assign.</div>
                <div class="col-lg-12">
                    <input @oninput="((txt) => OnSearchInputUser((string)txt.Value))" 
                    class="form-control"
                    placeholder="Search User"/>
                </div>
                <div class="col-lg-8">
                    <MyInputRadioGroup id="users" @bind-Value="updatedTask.UserId">
                            @if (users is not null)
                            {
                                @foreach (var u in users)
                                {
                                        <div class="radio-item-group">
                                            <InputRadio Value="@u.Id" id="@u.Id"/>
                                            <label for="@u.Id">@u.FullName</label>
                                        </div>
                                }
                            }
                    </MyInputRadioGroup>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}
else
{
    <ErrorMessage />
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateTaskModel updatedTask = new();
    private TaskModel task;
    private List<DepartmentModel> departments;
    private List<UserModel> users;
    private string searchDepartmentText = "";
    private string searchUserText = "";

    protected override async Task OnInitializedAsync()
    {
        task = await taskEndpoint.GetTaskByIdAsync(Id);
        departments = await departmentEndpoint.GetAllAsync();
        users = await userEndpoint.GetAllAsync();
        
        if (task is not null)
        {
            updatedTask.Title = task.Title;
            updatedTask.UserId = task.UserId;
            updatedTask.DepartmentId = task.DepartmentId;
            updatedTask.Description = task.Description;
            updatedTask.DateDue = task.DateDue;
            updatedTask.PercentageDone = task.PercentageDone;
            updatedTask.IsDone = task.IsDone;
            updatedTask.DateCreated = task.DateCreated;
            updatedTask.Archived = task.Archived;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterDepartments();
            await FilterUsers();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchDepartmentText));
        searchDepartmentText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(searchUserText));
        searchUserText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchDepartmentText), searchDepartmentText);
        await sessionStorage.SetAsync(nameof(searchUserText), searchUserText);
    }

    private async Task FilterDepartments()
    {
        var output = await departmentEndpoint.GetAllAsync();

        if (string.IsNullOrWhiteSpace(searchDepartmentText) == false)
        {
            output = output.Where(d => d.DepartmentName.Contains(searchDepartmentText, StringComparison.InvariantCultureIgnoreCase) ||
                    d.Description.Contains(searchDepartmentText, StringComparison.InvariantCultureIgnoreCase) ||
                    d.Address.Contains(searchDepartmentText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        departments = output;
        await SaveFilterState();
    }

    private async Task FilterUsers()
    {
        var output = await userEndpoint.GetAllAsync();

        if (string.IsNullOrWhiteSpace(searchUserText) == false)
        {
            output = output.Where(u => u.FirstName.Contains(searchUserText, StringComparison.InvariantCultureIgnoreCase) ||
                u.LastName.Contains(searchUserText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        users = output;
        await SaveFilterState();
    }

    private async Task OnSearchInputDepartment(string searchInput)
    {
        searchDepartmentText = searchInput;
        await FilterDepartments();
    }

    private async Task OnSearchInputUser(string searchInput)
    {
        searchUserText = searchInput;
        await FilterUsers();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task UpdateTaskAsync()
    {
        task.Title = updatedTask.Title;
        task.UserId = updatedTask.UserId;
        task.DepartmentId = updatedTask.DepartmentId;
        task.Description = updatedTask.Description;
        task.DateDue = updatedTask.DateDue;
        task.PercentageDone = updatedTask.PercentageDone.Value;
        task.IsDone = updatedTask.IsDone;
        task.DateCreated = updatedTask.DateCreated;
        task.Archived = updatedTask.Archived;

        await taskEndpoint.UpdateAsync(task);
        updatedTask = new();
        ClosePage();
    }
}
