@page "/UpdateTask/{Id:int}"
@inject ITaskEndpoint taskEndpoint
@inject IDepartmentEndpoint departmentEndpoint
@inject IUserEndpoint userEndpoint
@inject IMapper mapper
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (task is not null)
{
    <EditForm Model="formTask" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="row">
            @if (users is not null && departments is not null)
            {
                <label for="task-userId" class="col-md-2 col-form-label">User: </label>
                <div class="col-md-10">
                    <MyInputRadioGroup id="users" @bind-Value="formTask.UserId">
                    @foreach (var user in users)
                    {
                            <div>
                                <InputRadio Value="@user.Id" id="@user.Id" />
                                <label for="@user.Id">@user.FullName</label>
                            </div>
                    }
                    </MyInputRadioGroup>
                </div>
                <label for="task-departmentId" class="col-md-2 col-form-label">Department: </label>
                <div class="col-md-10">
                    <MyInputRadioGroup id="departments" @bind-Value="formTask.DepartmentId">
                    @foreach (var department in departments)
                    {
                            <div>
                                <InputRadio Value="@department.Id" id="@department.Id" />
                                <label for="@department.Id">@department.DepartmentName</label>
                            </div>
                    }
                    </MyInputRadioGroup>
                </div>
            } 
        </div>
        <div class="row">
            <label for="task-title" class="col-md-2 col-form-label">Title: </label>
            <div class="col-md-10">
                <InputText @bind-Value="formTask.Title" placeholder="Title" class="form-control" />
                <ValidationMessage For="@(() => formTask.Title)" />
            </div>
            <label for="task-description" class="col-md-2 col-form-label">Description: </label>
            <div class="col-md-10">
                <InputText @bind-Value="formTask.Description" placeholder="Description" class="form-control"/>
                <ValidationMessage For="@(() => formTask.Description)" />
            </div>
             <label for="task-DateDue" class="col-md-2 col-form-label">Date Due: </label>
            <div class="col-md-10">
                <InputDate @bind-Value="formTask.DateDue" class="form-control" />
                <ValidationMessage For="@(() => formTask.DateDue)" />
            </div>
        </div>
        <div class="row">
            <button type="submit" class="btn btn-success">
                Submit
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private TaskModel task;
    private FormTaskModel formTask = new();

    private List<UserModel> users;

    private List<DepartmentModel> departments;
    private DepartmentModel department;

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        task = await taskEndpoint.GetTaskByIdAsync(Id);
        formTask = mapper.Map<FormTaskModel>(task);
        department = await departmentEndpoint.GetByIdAsync(task.Id);
        departments = await departmentEndpoint.GetAllAsync();
        users = await userEndpoint.GetAllAsync();
    }

    private async Task OnValidSubmit()
    {
        errorMessage = "";
        var mappedTask = mapper.Map<TaskModel>(formTask);

        try
        {
            await taskEndpoint.UpdateAsync(mappedTask);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
