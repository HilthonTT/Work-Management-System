@page "/admin/Part"
@inject IStockEndpoint stockEndpoint
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IMapper mapper
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

<h1>Part</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<EditForm Model="formPart" OnValidSubmit="SavePart">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm">
            <strong>Part Form</strong>
            <div class="mb-3">
                <label class="col-form-label">Part Name</label>
                <InputText class="form-control" @bind-Value="formPart.PartName" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">Model Name</label>
                <InputText class="form-control" @bind-Value="formPart.ModelName" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">Purchased Price</label>
                <InputNumber class="form-control" @bind-Value="formPart.PurchasedPrice" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">Date Purchased</label>
                <InputDate class="form-control" @bind-Value="formPart.DatePurchased" />
            </div>
            <div class="mb-3">
                <div class="col-md-12 text-center">
                    <button type="submit" class="btn btn-success">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <strong>Parts</strong>
            <div class="form-check">
                <MyInputRadioGroup ValueChanged="((e) => OnRadioPartChange(e))" TValue="int" ValueExpression="(() => SelectedValue)">
                    @if (parts is not null)
                    {
                        <Virtualize Items="parts" Context="p" OverscanCount="10">
                            <div>
                                <InputRadio Value="p.Id" id="@p.Id" />
                                <label for="@p.Id">@p.PartName - @p.ModelName</label>
                            </div>
                        </Virtualize>
                    }
                </MyInputRadioGroup>
            </div>
        </div>
        <div class="col-sm">
            <strong>Machines</strong>
            <div class="form-check">
                <MyInputRadioGroup @bind-Value="formPart.MachineId">
                    @if (machines is not null)
                    {
                        <Virtualize Items="machines" Context="m" OverscanCount="10">
                            <div>
                                <InputRadio Value="m.Id" id="@m.Id" />
                                <label for="@m.Id">@m.MachineName - @m.ModelName</label>
                            </div>
                        </Virtualize>
                    }
                </MyInputRadioGroup>
            </div>
        </div>
    </div>
</EditForm>


@code {
    public int SelectedValue { get; set; }

    private double totalMinutesPart = 0;
    private double totalMinutesMachine = 0;

    private List<PartModel> parts;
    private FormPartModel formPart = new();
    private const string PartListName = "partListName";
    private const string PartCacheDate = "partCacheDate";

    private List<MachineModel> machines;
    private FormMachineModel formMachine = new();
    private const string MachineListName = "machineList";
    private const string MachineCacheDate = "machineCacheDate";

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        formPart.DatePurchased = DateTime.UtcNow;

        parts = await localStorage.GetItemAsync<List<PartModel>>(PartListName);
        machines = await localStorage.GetItemAsync<List<MachineModel>>(MachineListName);

        DateTime? cacheDateParts = await localStorage.GetItemAsync<DateTime?>(PartCacheDate);
        DateTime? cacheDateMachines = await localStorage.GetItemAsync<DateTime?>(MachineCacheDate);

        if (cacheDateParts is not null)
        {
            totalMinutesPart = DateTime.UtcNow.Subtract((DateTime)cacheDateParts).TotalMinutes;
        }

        if (cacheDateMachines is not null)
        {
            totalMinutesMachine = DateTime.UtcNow.Subtract((DateTime)cacheDateMachines).TotalMinutes;
        }

        if (machines is null || parts is null ||
            totalMinutesPart > 10 || totalMinutesMachine > 10)
        {
            try
            {
                machines = await stockEndpoint.GetAllMachinesAsync();
                await localStorage.SetItemAsync(MachineListName, machines);
                await localStorage.SetItemAsync(MachineCacheDate, DateTime.UtcNow);
                parts = await stockEndpoint.GetAllPartsAsync();
                await localStorage.SetItemAsync(PartListName, parts);
                await localStorage.SetItemAsync(PartCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task SavePart()
    {
        errorMessage = "";
        var mappedPart = mapper.Map<PartModel>(formPart);

        try
        {
            if (formPart.Id == 0)
                await stockEndpoint.InsertPartAsync(mappedPart);
            else
                await stockEndpoint.UpdatePartAsync(mappedPart);
               
            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void OnRadioPartChange(object sender)
    {
        formPart = mapper.Map<FormPartModel>(parts.Where(x => x.Id == (int)sender).FirstOrDefault());
    }
}
