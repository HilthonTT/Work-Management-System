@page "/userRoles"
@using WSMPortal.Components;
@inject IUserEndpoint userEndpoint
@inject IJobTitleEndpoint jobTitleEndpoint
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@attribute [Authorize(Roles = "Admin")]

<h1 class="page-heading text-uppercase mb-4">Users's roles and current job title</h1>

<div class="row justify-content-center create-form">
    <div class="col-xl-3 form-layout create-form-department-company">
        <div class="input-section">
            <label class="form-label fw-bold text-uppercase">User Roles</label>
            <div class="input-description">Choose one role to remove from a user. This affects their permissions.</div>
            <div class="col-lg-12">
                <input @oninput="((txt) => OnSearchInputUserRole((string)txt.Value))" 
                    type="text" class="form-control" 
                    placeholder="Search User Role" />
            </div>
            <div class="col-lg-8">
                <MyInputRadioGroup id="user-roles" @bind-Value="selectedUserRole">
                    @if (userRoles is not null && availableRoles is not null)
                    {
                        @foreach (var r in userRoles)
                        {
                            <div class="radio-item-group">
                                <InputRadio Value="@r" id="@r" @onclick="(() => LoadSelectedAvailableRole(r))"/>
                                <label for="@r">@r</label>
                            </div>
                        }
                    }
                </MyInputRadioGroup>
            </div>
        </div>
        <div class="input-section">
            <label class="form-label fw-bold text-uppercase">Availables Roles</label>
            <div class="input-description">Choose one role to add on a user. This affects their permissions.</div>
            <div class="col-lg-12">
                <input @oninput="((txt) => OnSearchInputAvailableRole((string)txt.Value))" 
                    type="text" 
                    class="form-control" 
                    placeholder="Search Available Role" />
            </div>
            <div class="col-lg-8">
                <MyInputRadioGroup id="available-roles" @bind-Value="selectedAvailableRole">
                    @if (availableRoles is not null && userRoles is not null)
                    {
                        @foreach (var r in availableRoles)
                        {
                            <div class="radio-item-group">
                                <InputRadio Value="@r" id="@r" />
                                <label for="@r">@r</label>
                            </div>
                        }
                    }
                </MyInputRadioGroup>
            </div>
        </div>
    </div>
    <div class="col-xl-5 col-lg-10 form-layout">
        <div class="close-button-section">
            <button class="btn btn-close" @onclick="ClosePage"></button>
        </div>
        <div class="input-section">
            <label class="form-label fw-bold text-uppercase" for="users">Users</label>
            <div class="input-description">Choose one user to add/remove a role/job title</div>
            <div class="col-lg-12">
                <input @oninput="((txt) => OnSearchInputUser((string)txt.Value))" 
                    type="text" 
                    class="form-control mb-2" 
                    placeholder="Search User" />
                <div class="center-children">
                    <div class="btn-group align-items-center">
                        <button class="btn btn-success" @onclick="AddSelectedRole">Add Role</button>
                        <button class="btn btn-success" @onclick="RemoveSelectedRole">Remove Role</button>
                        <button class="btn btn-success" @onclick="AddSelectedJob">Add Job</button>
                        <button class="btn btn-success" @onclick="RemoveSelectedJob">Remove Job</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-8">
                <MyInputRadioGroup id="users" @bind-Value="selectedUser.Id">
                    @if (users is not null)
                    {
                        @foreach (var u in users)
                        {
                            <div class="radio-item-group">
                                <InputRadio Value="@u.Id" id="@u.Id" @onclick="(() => LoadSelectedUser(u.Id))"/>
                                <label for="@u.Id">@u.FullName - @u.RoleList</label>
                            </div>
                        }
                    }
                </MyInputRadioGroup>
            </div>
        </div>
    </div>
    <div class="col-xl-3 form-layout create-form-user">
        <div class="input-section">
            <label class="form-label fw-bold text-uppercase">User Jobs</label>
            <div class="input-description">Choose one job title to remove on a user. This doesn't affect permissions</div>
            <div class="col-lg-12">
                <input @oninput="((txt) => OnSearchInputUserJob((string)txt.Value))" 
                    type="text" 
                    class="form-control" 
                    placeholder="Search User Job" />
            </div>
            <div class="col-lg-8">
                <MyInputRadioGroup id="user-jobs" @bind-Value="selectedUserJob">
                    @if (userJobs is not null && availableJobs is not null)
                    {
                        @foreach (var j in userJobs)
                        {
                            <div class="radio-item-group">
                                <InputRadio Value="j" id="@j" @onclick="(() => LoadSelectedUserJob(j))"/>
                                <label for="@j">@j</label>
                            </div>
                        }
                    }
                </MyInputRadioGroup>
            </div>
        </div>
        <div class="input-section">
            <label class="form-label fw-bold text-uppercase">Available Jobs</label>
            <div class="input-description">Choose one job title to add on a user. This doesn't affect permissions.</div>
            <div class="col-lg-12">
                <input @oninput="((txt) => OnSearchInputAvailableJob((string)txt.Value))" 
                    type="text" 
                    class="form-control" 
                    placeholder="Search Available Job" />
            </div>
            <div class="col-lg-8">
                <MyInputRadioGroup id="available-jobs" @bind-Value="selectedAvailableJob">
                    @if (availableJobs is not null && userJobs is not null)
                    {
                        @foreach (var j in availableJobs)
                        {
                            <div class="radio-item-group">
                                <InputRadio Value="j" id="@j" @onclick="(() => LoadSelectedAvailableJob(j))" />
                                <label for="@j">@j</label>
                            </div>
                        }
                    }
                </MyInputRadioGroup>
            </div>
        </div>
    </div>
</div>

@code {
    private UserModel selectedUser = new();
    private List<UserModel> users;
    private List<string> availableRoles = new();
    private List<string> userRoles;
    private string selectedAvailableRole = "";
    private string selectedUserRole = "";
    private List<string> availableJobs = new();
    private List<string> userJobs = new();
    private string selectedAvailableJob = "";
    private string selectedUserJob = "";

    private string searchUserText = "";
    private string searchAvailableJobText = "";
    private string searchUserJobText = "";
    private string searchAvailableRoleText = "";
    private string searchUserRoleText = "";

    protected override async Task OnInitializedAsync()
    {
        users = await userEndpoint.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAllFilters();
            await SaveFilterState();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchUserText));
        searchUserText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(searchAvailableJobText));
        searchAvailableJobText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(searchAvailableRoleText));
        searchAvailableRoleText = stringResults.Success ? stringResults.Value : "";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchUserJobText));
        searchUserJobText = stringResults.Success ? stringResults.Value : "";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchUserRoleText));
        searchUserRoleText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchUserText), searchUserText);
        await sessionStorage.SetAsync(nameof(searchAvailableJobText), searchAvailableJobText);
        await sessionStorage.SetAsync(nameof(searchAvailableRoleText), searchAvailableRoleText);
        await sessionStorage.SetAsync(nameof(searchUserJobText), searchUserJobText);
        await sessionStorage.SetAsync(nameof(searchUserRoleText), searchUserRoleText);
    }

    private async Task LoadAllFilters()
    {
        await FilterUsers();
        await FilterUserRoles();
        await FilterAvailableRoles();
        await FilterUserJobs();
        await FilterAvailableJobs();
    }

    private async Task FilterUsers()
    {
        var output = await userEndpoint.GetAllAsync();

        if (string.IsNullOrWhiteSpace(searchUserText) == false)
        {
            output = output.Where(u => u.FirstName.Contains(searchUserText, StringComparison.InvariantCultureIgnoreCase) ||
                u.LastName.Contains(searchUserText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        users = output;
        await SaveFilterState();
    }

    private async Task FilterAvailableJobs()
    {
        await LoadJobs();
        var output = availableJobs;

        if (string.IsNullOrWhiteSpace(searchAvailableJobText) == false)
        {
            output = output.Where(j => j.Contains(searchAvailableJobText, StringComparison.InvariantCultureIgnoreCase) ||
                j.Contains(searchAvailableJobText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        availableJobs = output;
        await SaveFilterState();
    }

    private async Task FilterUserJobs()
    {
        var userJobList = selectedUser.JobTitles.Select(j => j.JobName).ToList();

        var output = userJobList;

        if (string.IsNullOrWhiteSpace(searchUserJobText) == false)
        {
            output = output.Where(j => j.Contains(searchUserJobText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        userJobs = output;
        await SaveFilterState();
    }

    private async Task FilterAvailableRoles()
    {
        await LoadRoles();
        var output = availableRoles;

        if (string.IsNullOrWhiteSpace(searchAvailableRoleText) == false)
        {
            output = output.Where(r => r.Contains(searchAvailableRoleText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        availableRoles = output;
        await SaveFilterState();
    }

    private async Task FilterUserRoles()
    {
        var userRolesList = new List<string>();
        var allUserRoles = selectedUser.Roles;

        foreach (var r in allUserRoles)
        {
            userRolesList.Add(r.Value);
        }

        var output = userRolesList;

        if (string.IsNullOrWhiteSpace(searchUserRoleText) == false)
        {
            output = output.Where(r => r.Contains(searchUserRoleText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        userRoles = output;
        await SaveFilterState();
    }

    private async Task OnSearchInputUser(string searchInput)
    {
        searchUserText = searchInput;
        await FilterUsers();
    }

    private async Task OnSearchInputAvailableRole(string searchInput)
    {
        searchAvailableRoleText = searchInput;
        await FilterAvailableRoles();
    }

    private async Task OnSearchInputUserRole(string searchInput)
    {
        searchUserRoleText = searchInput;
        await FilterUserRoles();
    }

    private async Task OnSearchInputAvailableJob(string searchInput)
    {
        searchAvailableJobText = searchInput;
        await FilterAvailableJobs();
    }

    private async Task OnSearchInputUserJob(string searchInput)
    {
        searchUserJobText = searchInput;
        await FilterUserJobs();
    }

    private async Task LoadRoles()
    {
        var roles = await userEndpoint.GetAllRolesAsync();
        availableRoles.Clear();

        foreach (var r in roles)
        {
            if (userRoles.IndexOf(r.Value) < 0)
            {
                availableRoles.Add(r.Value);
            }
        }
    }

    private async Task LoadJobs()
    {
        var jobs = await jobTitleEndpoint.GetAllAsync();
        availableJobs.Clear();

        foreach (var j in jobs)
        {
            if (userJobs.IndexOf(j.JobName) < 0)
            {
                availableJobs.Add(j.JobName);
            }
        }
    }

    private async Task AddSelectedRole()
    {
        await userEndpoint.AddUserToRoleAsync(selectedUser.Id, selectedAvailableRole);

        userRoles.Add(selectedAvailableRole);
        availableRoles.Remove(selectedAvailableRole);
    }

    private async Task RemoveSelectedRole()
    {
        await userEndpoint.RemoveUserFromRoleAsync(selectedUser.Id, selectedUserRole);

        availableRoles.Add(selectedUserRole);
        userRoles.Remove(selectedUserRole);
    }

    private async Task AddSelectedJob()
    {
        var user = await userEndpoint.GetByIdAsync(selectedUser.Id);
        var jobs = await jobTitleEndpoint.GetAllAsync();
        var chosenJob = jobs.Where(j => j.JobName == selectedAvailableJob).FirstOrDefault();

        var selectedJob = await jobTitleEndpoint.GetByIdAsync(chosenJob.Id);
        user.JobTitleId = chosenJob.Id;

        await userEndpoint.UpdateUserJobTitleIdAsync(user);

        userJobs.Add(selectedJob.JobName);
        availableJobs.Remove(selectedJob.JobName);

        selectedAvailableJob = "";
    }

    private async Task RemoveSelectedJob()
    {
        var user = await userEndpoint.GetByIdAsync(selectedUser.Id);
        var jobs = await jobTitleEndpoint.GetAllAsync();
        var chosenJob = jobs.Where(j => j.JobName == selectedUserJob).FirstOrDefault();

        var selectedJob = await jobTitleEndpoint.GetByIdAsync(chosenJob.Id);

        user.JobTitleId = null;

        await userEndpoint.UpdateUserJobTitleIdAsync(user);

        userJobs.Remove(selectedJob.JobName);
        availableJobs.Add(selectedJob.JobName);

        selectedAvailableJob = "";
    }

    private async Task LoadSelectedUser(string Id)
    {
        selectedUser = await userEndpoint.GetByIdAsync(Id);
        userRoles = new List<string>(selectedUser.Roles.Select(x => x.Value));
        await LoadRoles();
        userJobs = new List<string>(selectedUser.JobTitles.Select(j => j.JobName));
        await LoadJobs();
    }

    private void LoadSelectedAvailableRole(string roleName)
    {
        selectedAvailableRole = roleName;
    }

    private void LoadUserRole(string roleName)
    {
        selectedUserRole = roleName;
    }

    private void LoadSelectedAvailableJob(string job)
    {
        selectedAvailableJob = job;
    }

    private void LoadSelectedUserJob(string job)
    {
        selectedUserJob = job;
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task<string> GetJobName(int Id)
    {
        var job = await jobTitleEndpoint.GetByIdAsync(Id);

        if (job is not null)
        {
            return job.JobName;
        }

        return "N/A";
    }
}