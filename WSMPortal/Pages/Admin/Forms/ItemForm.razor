@page "/admin/Item"
@inject IItemEndpoint itemEndpoint
@inject IMapper mapper
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

<h1>Machine</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="alert alert-warning">
    The EAN Is Not A Required Field.
</div>

<EditForm Model="formItem" OnValidSubmit="SaveItem">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm">
            <strong>Item Form</strong>
            <div class="mb-3">
                <label class="col-form-label">Model Name</label>
                <InputText class="form-control" @bind-Value="formItem.ModelName" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">Purchased Price</label>
                <InputNumber class="form-control" @bind-Value="formItem.Description" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">European Article Number</label>
                <InputNumber class="form-control" @bind-Value="formItem.Quantity" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">Date Purchased</label>
                <InputNumber class="form-control" @bind-Value="formItem.Price" />
            </div>
            <div class="mb-3">
                <label class="col-form-label">Date Purchased</label>
                <InputNumber class="form-control" @bind-Value="formItem.EAN" />
            </div>
            <div class="mb-3">
                <div class="col-md-12 text-center">
                    <button type="submit" class="btn btn-success">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <strong>Items</strong>
            <div class="form-check">
                <MyInputRadioGroup ValueChanged="((e) => OnRadioItemChange(e))" TValue="int" ValueExpression="(() => SelectedValue)">
                    @if (items is not null)
                    {
                        <Virtualize Items="items" Context="i" OverscanCount="10">
                            <div>
                                <InputRadio Value="i.Id" id="@i.Id" />
                                <label for="@i.Id">@i.ModelName - @i.Price€</label>
                            </div>
                        </Virtualize>
                    }
                </MyInputRadioGroup>
            </div>
        </div>
    </div>
</EditForm>



@code {
    public int SelectedValue { get; set; }

    private double totalMinutesMachine = 0;

    private List<ItemModel> items;
    private FormItemModel formItem = new();
    private const string ItemListName = "itemList";
    private const string ItemCacheDate = "itemCacheDate";

    private string errorMessage = "";


    protected override async Task OnInitializedAsync()
    {
        items = await localStorage.GetItemAsync<List<ItemModel>>(ItemListName);

        DateTime? cacheDateItems = await localStorage.GetItemAsync<DateTime?>(ItemCacheDate);

        if (cacheDateItems is not null)
        {
            totalMinutesMachine = DateTime.UtcNow.Subtract((DateTime)cacheDateItems).TotalMinutes;
        }

        if (items is null || totalMinutesMachine > 10)
        {
            try
            {
                items = await itemEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(ItemListName, items);
                await localStorage.SetItemAsync(ItemCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task SaveItem()
    {
        errorMessage = "";
        var mappedItem = mapper.Map<ItemModel>(formItem);

        try
        {
            if (formItem.Id == 0)
                await itemEndpoint.InsertItemAsync(mappedItem);
            else
                await itemEndpoint.UpdateItemAsync(mappedItem);

            navManager.NavigateTo(navManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void OnRadioItemChange(object sender)
    {
        formItem = mapper.Map<FormItemModel>(items.Where(x => x.Id == (int)sender).FirstOrDefault());
    }
}
