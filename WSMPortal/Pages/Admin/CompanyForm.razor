@page "/admin/Company"
@inject ICompanyEndpoint companyEndpoint
@inject IUserEndpoint userEndpoint
@inject IMapper mapper
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

<h1>Company</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<EditForm Model="formCompany" OnValidSubmit="CreateCompany">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-sm">
            <strong class="align-items-center">Company Form</strong>
            <div>
                <label class="col-form-label">Company Name: </label>
                <InputText class="form-control" @bind-Value="formCompany.CompanyName" />
            </div>
            <div>
                <label class="col-form-label">Company Address</label>
                <InputText class="form-control" @bind-Value="formCompany.Address" />
            </div>
            <div>
                <label class="col-form-label">Phone Number</label>
                <InputText class="form-control" @bind-Value="formCompany.PhoneNumber" />
            </div>
            <div>
                <label class="col-form-label">Description</label>
                <InputText class="form-control" @bind-Value="formCompany.Description" />
            </div>
            <div>
                <label class="col-form-label">Date Founded</label>
                <InputDate class="form-control" @bind-Value="formCompany.DateFounded" />
            </div>
            <div>
                <div class="col-md-12 text-center mt-2">
                    <button type="submit" class="btn btn-success">
                        Submit
                    </button>
                </div>
            </div>
        </div>
        <strong>Chair Person</strong>
        <MyInputRadioGroup @bind-Value="formCompany.ChairPersonId">
            @if (users is not null)
            {
                <Virtualize Items="users" Context="u" OverscanCount="10">
                    <div>
                        <InputRadio Value="u.Id" id="@u.Id" />
                        <label for="@u.Id">@u.FullName</label>
                    </div>
                </Virtualize>
            }
        </MyInputRadioGroup>
    </div>
</EditForm>

@code {
    private double totalMinutesCompany = 0;
    private double totalMinutesUser = 0;

    private List<CompanyModel> companies;
    private FormCompanyModel formCompany = new();
    private const string CompanyListName = "companyList";
    private const string CompanyCacheDate = "companyCacheDate";

    private List<UserModel> users;
    private const string UserListName = "userList";
    private const string UserCacheDate = "userCacheDate";

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        formCompany.DateFounded = DateTime.UtcNow;

        companies = await localStorage.GetItemAsync<List<CompanyModel>>(CompanyListName);
        users = await localStorage.GetItemAsync<List<UserModel>>(UserListName);

        DateTime? cacheDateCompanies = await localStorage.GetItemAsync<DateTime?>(CompanyCacheDate);
        DateTime? cacheDateUsers = await localStorage.GetItemAsync<DateTime?>(UserCacheDate);

        if (cacheDateCompanies is not null)
        {
            totalMinutesCompany = DateTime.UtcNow.Subtract((DateTime)cacheDateCompanies).TotalMinutes;
        }

        if (cacheDateUsers is not null)
        {
            totalMinutesUser = DateTime.UtcNow.Subtract((DateTime)cacheDateUsers).TotalMinutes;
        }

        if (companies is null || users is null ||
            totalMinutesCompany > 10 || totalMinutesUser > 10)
        {
            try
            {
                companies = await companyEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(CompanyListName, companies);
                await localStorage.SetItemAsync(CompanyCacheDate, DateTime.UtcNow);
                users = await userEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(UserListName, users);
                await localStorage.SetItemAsync(UserCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task CreateCompany()
    {
        try
        {
            var mappedCompanyModel = mapper.Map<CompanyModel>(formCompany);

            await companyEndpoint.PostCompanyAsync(mappedCompanyModel);
            navManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
