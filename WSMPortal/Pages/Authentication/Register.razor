@page "/register"
@inject IUserEndpoint userEndpoint
@inject IAuthenticationService authService
@inject NavigationManager navManager
@attribute [AllowAnonymous]

<h1>Register</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <label for="first-name" class="col-md-2 col-form-label">First Name: </label>
        <div class="md-10">
            <InputText id="first-name" class="form-control mb-4" @bind-Value="model.FirstName" />
            <ValidationMessage For="@(() => model.FirstName)" />
        </div>
    </div>

    <div class="row">
        <label for="last-name" class="col-md-2 col-form-label">Last Name: </label>
        <div class="md-10">
            <InputText id="last-name" class="form-control mb-4" @bind-Value="model.LastName" />
            <ValidationMessage For="@(() => model.LastName)" />
        </div>
    </div>

    <div class="row">
        <label for="email" class="col-md-2 col-form-label">Email Address: </label>
        <div class="md-10">
            <InputText id="email" class="form-control mb-4" @bind-Value="model.EmailAddress" />
            <ValidationMessage For="@(() => model.EmailAddress)" />
        </div>
    </div>

    <div class="row">
        <label for="phone-number" class="col-md-2 col-form-label">Phone Number: </label>
        <div class="md-10">
            <InputText id="phone-number" class="form-control mb-4" @bind-Value="model.PhoneNumber" />
            <ValidationMessage For="@(() => model.PhoneNumber)" />
        </div>
    </div>

    <div class="row">
        <label for="date-birth" class="col-md-2 col-form-label">Date of Birth: </label>
        <div class="md-10">
            <InputDate id="phone-number" class="form-control mb-4" @bind-Value="model.DateOfBirth" />
            <ValidationMessage For="@(() => model.DateOfBirth)" />
        </div>
    </div>

    <div class="row">
        <label for="password" class="col-md-2 col-form-label">Password: </label>
        <div class="md-10">
            <InputText id="password" type="password" class="form-control mb-4" @bind-Value="model.Password" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>
    </div>

    <div class="row">
        <label for="password" class="col-md-2 col-form-label">Confirm Password: </label>
        <div class="md-10">
            <InputText id="password" type="password" class="form-control mb-4" @bind-Value="model.ConfirmPassword" />
            <ValidationMessage For="@(() => model.ConfirmPassword)" />
        </div>
    </div>

    <div>
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-success">Create Account</button>
        </div>
    </div>
</EditForm>


@code {
    private CreateUserModel model = new();
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        model.DateOfBirth = DateTime.Now;
    }

    private async Task OnValidSubmit()
    {
        errorMessage = "";

        try
        {

            await userEndpoint.CreateUserAsync(model);

            AuthenticatedUserModel result = await authService.Login(new()
            {
                Email = model.EmailAddress,
                Password = model.Password
            });

            if (result is not null)
            {
                navManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "The registration worked but there was an error when trying to login.";
            }

        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
