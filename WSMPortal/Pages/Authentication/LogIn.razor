@page "/login"
@inject IAuthenticationService authService
@inject NavigationManager navManager

<h1>Log In</h1>

@if (showAuthenticationError is true)
{
    <div class="alert alert-danger" role="alert">
        @authenticationErrorText
    </div>
}

<EditForm Model="model" OnValidSubmit="ExecuteLogin">
    <DataAnnotationsValidator />
    <div class="row">
        <label for="first-name" class="col-md-2 col-form-label">Email Address: </label>
        <div class="md-10">
            <InputText id="first-name" class="form-control mb-4" @bind-Value="model.Email" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>
    </div>
    <div class="row">
        <label for="last-name" class="col-md-2 col-form-label">Password: </label>
        <div class="md-10">
            <InputText id="last-name" type="password" class="form-control mb-4" @bind-Value="model.Password" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>
    </div>
    <div>
       <div class="col-md-12 text-center">
           <button class="btn btn-success">Login</button>
       </div>
    </div>

    <div class="mt-1">
       <div class="col-md-12 text-center">
           <button class="btn btn-secondary" @onclick="RegisterUser">Register</button>
       </div>
    </div>
</EditForm>

@code {
    private AuthenticationUserModel model = new();

    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";


    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        AuthenticatedUserModel result = await authService.Login(model);

        if (result is not null)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "There was an error when trying to login.";
            showAuthenticationError = true;
        }
    }

    private void RegisterUser()
    {
        navManager.NavigateTo("/register");
    }
}
