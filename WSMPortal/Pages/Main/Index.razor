@page "/"
@inject ITaskEndpoint taskEndpoint
@inject IDepartmentEndpoint departmentEndpoint
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navManager
@attribute [Authorize]

<h1 class="page-heading text-uppercase mb-4">My Tasks</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (tasks is not null && departments is not null)
        {
            <Virtualize Items="tasks" Context="t" OverscanCount="10">
                <div class="object-entry mt-4">
                    <div>
                        <div @onclick="(() => OpenDetails(t))">
                            @t.Title
                        </div>
                        @if (archivingTask is null || archivingTask.Id != t.Id)
                        {
                            <div>
                                <div @onclick="(() => OpenDetails(t))">
                                    Dued at: @t.DateDue
                                </div>
                                <AuthorizeView Roles="Admin">
                                    <button class="btn" @onclick="(() => archivingTask = t)">
                                        archive
                                    </button>
                                </AuthorizeView>
                            </div>
                        }
                        else
                        {
                            <div>
                                <button class="btn btn-danger" @onclick="ArchiveTask">
                                    confirm
                                </button>
                                <button class="btn btn-success" @onclick="(() => archivingTask = null)">
                                    cancel
                                </button>
                            </div>
                        }
                    </div>
                    <div>
                        <div>
                            @showTaskDepartment(t.DepartmentId).DepartmentName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    private double totalMinutesTask = 0;
    private double totalMinutesDepartment = 0;

    private List<TaskModel> tasks;
    private TaskModel archivingTask;
    private const string TaskListName = "taskList";
    private const string TaskCacheDate = "taskCacheDate";

    private List<DepartmentModel> departments;
    private const string DepartmentListName = "departmentList";
    private const string DepartmentCacheDate = "departmentCacheDate";

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        tasks = await localStorage.GetItemAsync<List<TaskModel>>(TaskListName);
        departments = await localStorage.GetItemAsync<List<DepartmentModel>>(DepartmentListName);

        DateTime? cacheDateTasks = await localStorage.GetItemAsync<DateTime?>(TaskCacheDate);
        DateTime? cacheDateDepartments = await localStorage.GetItemAsync<DateTime?>(DepartmentCacheDate);

        if (cacheDateTasks is not null)
        {
            totalMinutesTask = DateTime.UtcNow.Subtract((DateTime)cacheDateTasks).TotalMinutes;
        }

        if (cacheDateDepartments is not null)
        {
            totalMinutesDepartment = DateTime.UtcNow.Subtract((DateTime)cacheDateDepartments).TotalMinutes;
        }

        if (tasks is null || departments is null ||
            cacheDateTasks is null || cacheDateDepartments is null ||
            totalMinutesTask > 10 || totalMinutesDepartment > 10)
        {
            try
            {
                tasks = await taskEndpoint.GetAllAsync();
                tasks = tasks.Where(x => x.UserId == loggedInUser.Id || x.DepartmentId == loggedInUser.DepartmentId).ToList();
                await localStorage.SetItemAsync(TaskListName, tasks);
                await localStorage.SetItemAsync(TaskCacheDate, DateTime.UtcNow);
                departments = await departmentEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(DepartmentListName, departments);
                await localStorage.SetItemAsync(DepartmentCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private async Task ArchiveTask()
    {
        archivingTask.Archived = true;
        await taskEndpoint.ArchiveTask(archivingTask);
        tasks.Remove(archivingTask);
        archivingTask = null;
    }

    private void OpenDetails(TaskModel task)
    {
        navManager.NavigateTo($"/TaskDetails/{task.Id}");
    }

    private void OpenTaskUpdate(TaskModel task)
    {
        navManager.NavigateTo($"/UpdateTask/{task.Id}");
    }

    private DepartmentModel showTaskDepartment(int? taskDepartmentId)
    {
        var selectedDepartment = departments.Where(x => x.Id == taskDepartmentId).FirstOrDefault();

        return selectedDepartment;
    }
}