@page "/"
@inject ITaskEndpoint taskEndpoint
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navManager
@attribute [Authorize]

<h1>My Tasks</h1>

<div class="row">
    <div class="col-sm">
        @if (tasks is not null)
        {
            <ul class="list-group">
                <Virtualize Items="tasks" OverscanCount="10" Context="t">
                    <li class="list-group-item mt-2" @onclick="(() => OpenDetails(t))">
                        @t.Title
                    </li>
                </Virtualize>
            </ul>
        }
    </div>
</div>

@code {
    private List<TaskModel> tasks;

    private const string TaskListName = "taskList";
    private const string TaskCacheDate = "taskCacheDate";
    private double totalMinutes = 0;

    protected override async Task OnInitializedAsync()
    {
        tasks = await localStorage.GetItemAsync<List<TaskModel>>(TaskListName);
        DateTime? cacheDate = await localStorage.GetItemAsync<DateTime?>(TaskCacheDate);

        if (cacheDate is not null)
        {
            totalMinutes = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
        }

        if (tasks is null || cacheDate is null || totalMinutes > 10)
        {
            try
            {
                tasks = await taskEndpoint.GetAllAsync();
                tasks = tasks.Where(x => x.UserId == loggedInUser.Id || x.DepartmentId == loggedInUser.DepartmentId).ToList();
                await localStorage.SetItemAsync(TaskListName, tasks);
                await localStorage.SetItemAsync(TaskCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void OpenDetails(TaskModel task)
    {
        navManager.NavigateTo($"/TaskDetails/{task.Id}");
    }


}