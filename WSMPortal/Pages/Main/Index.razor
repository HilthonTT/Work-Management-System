@page "/"
@inject ITaskEndpoint taskEndpoint
@inject IDepartmentEndpoint departmentEndpoint
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navManager
@attribute [Authorize]

<h1 class="text-center fw-bold">My Tasks</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="row">
    <div class="col-sm">
        @if (tasks is not null && departments is not null)
        {
            <Virtualize Items="tasks" OverscanCount="10" Context="t">
                <div class="card text-center mt-4">
                  <div class="card-header">
                    @if (showTaskDepartment(t.DepartmentId) is not null)
                    {
                        <p>Task Assigned To The @showTaskDepartment(t.DepartmentId).DepartmentName Department</p>
                    }
                    else
                    {
                        <p>Task Assigned To No Departments.</p>
                    }
                  </div>
                  <div class="card-body">
                    <h5 class="card-title">@t.Title</h5>
                    <p class="card-text">@t.Description</p>
                    <a @onclick="(() => OpenDetails(t))" class="btn btn-primary">Open Details</a>
                  </div>
                  <div class="card-footer text-muted">
                    Date Dued: @t.DateDue
                  </div>
                </div>
            </Virtualize>
        }
    </div>
</div>

@code {
    private double totalMinutesTask = 0;
    private double totalMinutesDepartment = 0;

    private List<TaskModel> tasks;
    private const string TaskListName = "taskList";
    private const string TaskCacheDate = "taskCacheDate";

    private List<DepartmentModel> departments;
    private const string DepartmentListName = "departmentList";
    private const string DepartmentCacheDate = "departmentCacheDate";

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        tasks = await localStorage.GetItemAsync<List<TaskModel>>(TaskListName);
        departments = await localStorage.GetItemAsync<List<DepartmentModel>>(DepartmentListName);

        DateTime? cacheDateTasks = await localStorage.GetItemAsync<DateTime?>(TaskCacheDate);
        DateTime? cacheDateDepartments = await localStorage.GetItemAsync<DateTime?>(DepartmentCacheDate);

        if (cacheDateTasks is not null)
        {
            totalMinutesTask = DateTime.UtcNow.Subtract((DateTime)cacheDateTasks).TotalMinutes;
        }

        if (cacheDateDepartments is not null)
        {
            totalMinutesDepartment = DateTime.UtcNow.Subtract((DateTime)cacheDateDepartments).TotalMinutes;
        }

        if (tasks is null || departments is null ||
            cacheDateTasks is null || cacheDateDepartments is null ||
            totalMinutesTask > 10 || totalMinutesDepartment > 10)
        {
            try
            {
                tasks = await taskEndpoint.GetAllAsync();
                tasks = tasks.Where(x => x.UserId == loggedInUser.Id || x.DepartmentId == loggedInUser.DepartmentId).ToList();
                await localStorage.SetItemAsync(TaskListName, tasks);
                await localStorage.SetItemAsync(TaskCacheDate, DateTime.UtcNow);
                departments = await departmentEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(DepartmentListName, departments);
                await localStorage.SetItemAsync(DepartmentCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }

    private void OpenDetails(TaskModel task)
    {
        navManager.NavigateTo($"/TaskDetails/{task.Id}");
    }

    private DepartmentModel showTaskDepartment(int? taskDepartmentId)
    {
        var selectedDepartment = departments.Where(x => x.Id == taskDepartmentId).FirstOrDefault();

        return selectedDepartment;
    }
}