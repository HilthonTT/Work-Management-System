@page "/createReport"
@using WSMPortal.Components;
@inject IReportEndpoint reportEndpoint
@inject ITaskEndpoint taskEndpoint
@inject ILoggedInUserModel loggedInUser
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@attribute [Authorize]

<h1 class="page-heading text-uppercase mb-4">Make A Report</h1>

<div class="row justify-content-center create-form">
    <div class="col-xl-12 col-lg-10 form-layout">
        <EditForm Model="report" OnValidSubmit="CreateReportAsync">
            <div class="close-button-section">
                <button class="btn btn-close" @onclick="ClosePage"></button>
            </div>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" id="report-name">Title</label>
                <div class="input-description">Focus on the report's title.</div>
                <InputText class="form-control" id="report-name" @bind-Value="report.Title" />
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" id="report-description">Description</label>
                <div class="input-description">Focus on the report's description. Explain your report in details.</div>
                <InputTextArea class="form-control" id="report-description" @bind-Value="report.Description" />
            </div>
            <div class="center-children">
                <button class="btn btn-success btn-lg text-uppercase">Create Report</button>
            </div>
            <div class="input-section">
                <label class="form-label fw-bold text-uppercase" for="task">Tasks</label>
                <div class="input-description">Choose one task that is affiliated with your report.</div>
                <div class="col-lg-12">
                    <input @oninput="((txt) => OnSearchInputTask((string)txt.Value))" 
                        type="text" 
                        class="form-control mb-4" 
                        placeholder="Search Task" />
                </div>
                <div class="col-lg-8">
                    <MyInputRadioGroup id="task" @bind-Value="report.TaskId">
                        @if (tasks is not null)
                        {
                            @foreach (var t in tasks)
                            {
                                <div class="radio-item-group">
                                    <InputRadio Value="t.Id" id="@t.Id"/>
                                    <label for="@t.Id">@t.Title</label>
                                </div>
                            }
                        }
                    </MyInputRadioGroup>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateReportModel report = new();
    private List<TaskModel> tasks;
    private string searchTaskText = "";

    protected override async Task OnInitializedAsync()
    {
        tasks = await taskEndpoint.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterTasks();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchTaskText));
        searchTaskText = stringResults.Success ? stringResults.Value : "";
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchTaskText), searchTaskText);
    }

    private async Task FilterTasks()
    {
        var output = await taskEndpoint.GetAllAsync();

        if (string.IsNullOrWhiteSpace(searchTaskText) == false)
        {
            output = output.Where(t => t.Title.Contains(searchTaskText, StringComparison.InvariantCultureIgnoreCase) ||
                t.Description.Contains(searchTaskText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        tasks = output;
        await SaveFilterState();
    }

    private async Task OnSearchInputTask(string searchInput)
    {
        searchTaskText = searchInput;
        await FilterTasks();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateReportAsync()
    {
        ReportModel r = new();
        r.TaskId = report.TaskId.Value;
        r.UserId = loggedInUser.Id;
        r.Title = report.Title;
        r.Description = report.Description;
        r.DateCreated = DateTime.UtcNow;
        r.Archived = false;

        await reportEndpoint.InsertReportAsync(r);
        report = new();
        ClosePage();
    }
}
