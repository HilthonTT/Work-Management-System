@page "/Stocks"
@inject IItemEndpoint itemEndpoint
@inject ILoggedInUserModel loggedInUser
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@attribute [Authorize]

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="row">
    <div class="col-sm">
        <label>Parts</label>
        <div class="mt-3">
            @if (items is not null)
            {
                <ul class="list-group">
                        <Virtualize Items="items" Context="i" OverscanCount="10">
                        <li class="list-group-item">
                            @i.ModelName - @i.Price
                        </li>
                    </Virtualize>
                </ul>
            }
        </div>
    </div>
</div>


@code {
    private double totalMinutesItem = 0;

    private List<ItemModel> items;
    private const string ItemListName = "partList";
    private const string ItemCacheDate = "partCacheDate";

    private string errorMessage = "";    

    protected override async Task OnInitializedAsync()
    {
        items = await localStorage.GetItemAsync<List<ItemModel>>(ItemListName);
        DateTime? cacheDatePart = await localStorage.GetItemAsync<DateTime?>(ItemCacheDate);

        if (cacheDatePart is not null)
        {
            totalMinutesItem = DateTime.UtcNow.Subtract((DateTime)cacheDatePart).TotalMinutes;
        }

        if (items is null || cacheDatePart is null || totalMinutesItem > 10)
        {
            try
            {
                items = await itemEndpoint.GetAllAsync();
                await localStorage.SetItemAsync(ItemListName, items);
                await localStorage.SetItemAsync(ItemCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }
}
