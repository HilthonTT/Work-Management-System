@page "/Stocks"
@inject IStockEndpoint stockEndpoint
@inject ILoggedInUserModel loggedInUser
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@attribute [Authorize]

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

<div class="row">
    <div class="col-sm">
        <label>Machines</label>
        <div class="mt-3">
            @if (machines is not null)
            {
                <ul class="list-group">
                    <Virtualize Items="machines" Context="m" OverscanCount="10">
                        <li class="list-group-item">
                            @m.MachineName - @m.ModelName
                        </li>
                    </Virtualize>
                </ul>
            }
        </div>
    </div>
    <div class="col-sm">
        <label>Parts</label>
        <div class="mt-3">
            @if (parts is not null)
            {
                <ul class="list-group">
                    <Virtualize Items="parts" Context="p" OverscanCount="10">
                        <li class="list-group-item">
                            @p.PartName - @p.ModelName
                        </li>
                    </Virtualize>
                </ul>
            }
        </div>
    </div>
</div>


@code {
    private double totalMinutesMachine = 0;
    private double totalMinutesPart = 0;

    private List<PartModel> parts;
    private const string PartListName = "partList";
    private const string PartCacheDate = "partCacheDate";

    private List<MachineModel> machines;
    private const string MachineListName = "machineList";
    private const string MachineCacheDate = "machineCacheDate";

    private string errorMessage = "";    

    protected override async Task OnInitializedAsync()
    {
        parts = await localStorage.GetItemAsync<List<PartModel>>(PartListName);
        DateTime? cacheDatePart = await localStorage.GetItemAsync<DateTime?>(PartCacheDate);

        machines = await localStorage.GetItemAsync<List<MachineModel>>(MachineListName);
        DateTime? cacheDateMachine = await localStorage.GetItemAsync<DateTime?>(MachineCacheDate);

        if (cacheDatePart is not null)
        {
            totalMinutesPart = DateTime.UtcNow.Subtract((DateTime)cacheDatePart).TotalMinutes;
        }

        if (cacheDateMachine is not null)
        {
            totalMinutesMachine = DateTime.UtcNow.Subtract((DateTime)cacheDateMachine).TotalMinutes;
        }

        if (parts is null || machines is null || 
            cacheDatePart is null || cacheDateMachine is null || 
            totalMinutesPart > 10 || totalMinutesMachine > 10)
        {
            try
            {
                parts = await stockEndpoint.GetAllPartsAsync();
                await localStorage.SetItemAsync(PartListName, parts);
                await localStorage.SetItemAsync(PartCacheDate, DateTime.UtcNow);
                machines = await stockEndpoint.GetAllMachinesAsync();
                await localStorage.SetItemAsync(MachineListName, machines);
                await localStorage.SetItemAsync(MachineCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }
}
