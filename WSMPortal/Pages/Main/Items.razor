@page "/items"
@inject IItemEndpoint itemEndpoint
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@attribute [Authorize]

<h1 class="page-heading text-uppercase mb-4">Items</h1>

<div class="row">
    <div class="col-md-2 mt-2 text-uppercase fw-bold text-light">@items?.Count Items</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn @SortedByPrice(true)" @onclick="(() => OrderByPrice(true))">Price</button>
        <button class="btn @SortedByPrice(false)" @onclick="(() => OrderByPrice(false))">Quantity</button>
    </div>
    <div class="col-md-4 col-xl-3 input-search">
        <input type="text" placeholder="Search" 
            aria-label="Search Box" 
            class="form-control rounded-control"
            @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
    <div class="col-12 d-block d-md-none">
        <div class="departments">
            <span class="text-uppercase fw-bold">Archived</span>
            <div class="@SortedByArchived()" @onclick="(() => OrderByArchived())">All</div>
            <div class="@SortedByArchived("Archived")" @onclick="@(() => OrderByArchived("Archived"))">Archived</div>
            <div class="@SortedByArchived("Non-Archived")" @onclick="@(() => OrderByArchived("Non-Archived"))">Non Archived</div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (items is not null)
        {
            <Virtualize Items="items" Context="i" OverscanCount="10">
                <div class="row form-layout mt-4 items-background" @onclick="(() => OpenDetails(i))">
                    <div class="col-12">
                        <div class="form-layout mb-2">
                            <div class="text-center fw-bold text-uppercase">Model Name</div>
                            <div class="text-center fw-bold">@i.ModelName</div>
                        </div>
                        <div class="form-layout mb-2">
                            <div class="text-center fw-bold text-uppercase">Quantity</div>
                            <div class="text-center fw-bold">@i.Quantity</div>
                        </div>
                        <div class="form-layout mb-2">
                            <div class="text-center fw-bold text-uppercase">Price</div>
                            <div class="text-center fw-bold">@i.Price€</div>
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3 d-none d-md-block">
        <div class="departments">
            <span class="text-uppercase fw-bold">Archived</span>
            <div class="@SortedByArchived()" @onclick="(() => OrderByArchived())">All</div>
            <div class="@SortedByArchived("Archived")" @onclick="@(() => OrderByArchived("Archived"))">Archived</div>
            <div class="@SortedByArchived("Non-Archived")" @onclick="@(() => OrderByArchived("Non-Archived"))">Non Archived</div>
        </div>
    </div>
</div>

@code {
    private List<ItemModel> items;
    private bool isSortedByPrice = true;
    private string selectedFilter = "Non-Archived";
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        items = await itemEndpoint.GetAllAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterItems();
            StateHasChanged();
        }
    }

    private void OpenDetails(ItemModel item)
    {
        navManager.NavigateTo($"/itemDetails/{item.Id}");
    }

    private void LoadUpdateItemPage(ItemModel item)
    {
        navManager.NavigateTo($"/updateItem/{item.Id}");
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";
        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedFilter));
        selectedFilter = stringResults.Success ? stringResults.Value : "Non-Archived";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByPrice));
        isSortedByPrice = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByPrice), isSortedByPrice);
        await sessionStorage.SetAsync(nameof(selectedFilter), selectedFilter);
    }

    private async Task FilterItems()
    {
        var output = await itemEndpoint.GetAllAsync();

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(i => i.ModelName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                i.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByPrice)
        {
            output = output.OrderByDescending(i => i.Price).ToList();
        }
        else
        {
            output = output.OrderByDescending(i => i.Quantity).ToList();
        }

        if (selectedFilter == "Archived")
        {
            output = output.Where(i => i.Archived).ToList();
        }
        else if (selectedFilter == "Non-Archived")
        {
            output = output.Where(i => i.Archived == false).ToList();
        }

        items = output;
        await SaveFilterState();
    }

    private async Task OrderByPrice(bool isPrice)
    {
        isSortedByPrice = isPrice;
        await FilterItems();
    }

    private async Task OrderByArchived(string filter = "All")
    {
        selectedFilter = filter;
        await FilterItems();    
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterItems();
    }

    private string SortedByPrice(bool isPrice)
    {
        if (isPrice == isSortedByPrice)
        {
            return "btn-success";
        }

        return "btn-danger";
    }

    private string SortedByArchived(string filter = "All")
    {
        if (filter == selectedFilter)
        {
            return "fw-bold";
        }

        return "";
    }
}
