@page "/TaskDetails/{Id:int}"
@inject ITaskEndpoint taskEndpoint
@inject IDepartmentEndpoint departmentEndpoint
@inject IUserEndpoint userEndpoint
@inject IMapper mapper
@inject NavigationManager navManager
@attribute [Authorize]

<h1 class="text-center">Task Details</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (task is not null)
{
    <div class="row">
        <div class="col-sm">
            @if (selectedTask is null)
            {
            <div class="card text-center mt-4">
                <div class="card-header">
                @if (department is not null)
                {
                    <p>Task Assigned To The @department.DepartmentName Department</p>
                }
                else
                {
                    <p>Task Assigned To No Departments.</p>
                }
                </div>
                <div class="card-body">
                    <h5 class="card-title">@task.Title</h5>
                    <p class="card-text">@task.Description</p>
                    <AuthorizeView Roles="Admin">
                        <button @onclick="(() => selectedTask = mapper.Map<FormTaskModel>(task))" class="btn btn-primary">Modify</button>
                    </AuthorizeView>
                </div>
                <div class="card-footer text-muted">
                Date Dued: @task.DateDue
                </div>
            </div>
            }
        </div>
</div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private TaskModel task;
    private FormTaskModel selectedTask = null;

    private List<UserModel> users;

    private DepartmentModel department;
    private List<DepartmentModel> departments;

    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        task = await taskEndpoint.GetTaskByIdAsync(Id);
        department = await departmentEndpoint.GetByIdAsync(task.Id);
    }
}
