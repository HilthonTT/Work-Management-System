@page "/Tasks"
@inject ITaskEndpoint taskEndpoint
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@inject ILoggedInUserModel loggedInUser
@attribute [Authorize]

<h1>Tasks</h1>

@if (tasks is not null)
{
    <div>
        <Virtualize Items="tasks" OverscanCount="10" Context="task">
            <p>Title: @task.Title</p>
            <p>Description: @task.Description</p>
        </Virtualize>
    </div>
}
else
{
    <h3>No Tasks loaded.</h3>
}


@code {
    private List<TaskModel> tasks;

    private const string TaskListName = "taskList";
    private const string TaskCacheDate = "taskCacheDate";
    private double totalMinutes = 0;

    protected override async Task OnInitializedAsync()
    {
        tasks = await localStorage.GetItemAsync<List<TaskModel>>(TaskListName);
        DateTime? cacheDate = await localStorage.GetItemAsync<DateTime?>(TaskCacheDate);

        if (cacheDate is not null)
        {
            totalMinutes = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
        }

        if (tasks is null || cacheDate is null || totalMinutes > 10)
        {
            try
            {
                tasks = await taskEndpoint.GetAllAsync();
                tasks = tasks.Where(x => x.UserId == loggedInUser.Id || x.DepartmentId == loggedInUser.DepartmentId).ToList();
                await localStorage.SetItemAsync(TaskListName, tasks);
                await localStorage.SetItemAsync(TaskCacheDate, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}